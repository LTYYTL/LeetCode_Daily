package com.interview.L0811;

/**
 * 面试题 08.11. 硬币
 * 硬币。给定数量不限的硬币，币值为25分、10分、5分和1分，编写代码计算n分有几种表示法。(结果可能会很大，你需要将结果模上1000000007)
 *
 * 示例1:
 *  输入: n = 5
 *  输出：2
 *  解释: 有两种方式可以凑成总金额:
 * 5=5
 * 5=1+1+1+1+1
 *
 * 示例2:
 *  输入: n = 10
 *  输出：4
 *  解释: 有四种方式可以凑成总金额:
 * 10=10
 * 10=5+5
 * 10=5+1+1+1+1+1
 * 10=1+1+1+1+1+1+1+1+1+1
 * 说明：
 *
 * 注意:
 * 你可以假设：
 * 0 <= n (总金额) <= 1000000
 */
public class Coin {
    /**
     * 方法：动态规划
     * @param n
     * @return
     */
    public int waysToChange(int n) {
        //模值
        int MOD = 1000000007;
        //硬币数组
        int[] coins = {1,5,10,25};
        //dp[i][j]:表示前i个硬币组成j价值的组合次数
        int[][] dp = new int[5][n+1];
        //dp[i][0] 多种硬币组成面值 0，只有一种方案，就是一枚也不选
        for (int i = 1; i <= 4; i++) {
            dp[i][0] = 1;
        }

        //遍历
        for (int i = 1; i <= 4 ; i++) {
            for (int j = 1; j <= n; j++) {
                //当组成价值比硬币还要小时
                if (j - coins[i-1] < 0)
                    //此硬币不选，次数为前i-1个硬币组成价值j的次数
                    dp[i][j] = dp[i-1][j] % MOD;
                else//选此硬币：dp[i][j-coins[i]] + 不选此硬币：dp[i-1][j]
                    dp[i][j] = (dp[i][j-coins[i-1]] % MOD + dp[i-1][j] % MOD) % MOD;
            }
        }

        return dp[4][n];
    }
}
