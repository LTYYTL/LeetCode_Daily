package com.leetcode.L901_1000.L0909;

public class SnakesLaddersTest {
    public static void main(String[] args) {
        SnakesLadders snakesLadders = new SnakesLadders();
        /*
          示例：
          输入：[
          [-1,-1,-1,-1,-1,-1],
          [-1,-1,-1,-1,-1,-1],
          [-1,-1,-1,-1,-1,-1],
          [-1,35,-1,-1,13,-1],
          [-1,-1,-1,-1,-1,-1],
          [-1,15,-1,-1,-1,-1]]
          输出：4
          解释：
          首先，从方格 1 [第 5 行，第 0 列] 开始。
          你决定移动到方格 2，并必须爬过梯子移动到到方格 15。
          然后你决定移动到方格 17 [第 3 行，第 5 列]，必须爬过蛇到方格 13。
          然后你决定移动到方格 14，且必须通过梯子移动到方格 35。
          然后你决定移动到方格 36, 游戏结束。
          可以证明你需要至少 4 次移动才能到达第 N*N 个方格，所以答案是 4。
         */
        int[][] board = new int[][]{
                {-1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1},
                {-1, 35, -1, -1, 13, -1},
                {-1, -1, -1, -1, -1, -1},
                {-1, 15, -1, -1, -1, -1}
        };

        System.out.println(snakesLadders.snakesAndLadders(board));
    }
}
