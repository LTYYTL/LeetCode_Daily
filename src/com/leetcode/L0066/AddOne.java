package com.leetcode.L0066;

/**
 * 66. 加一
 * 给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。
 * 最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。
 * 你可以假设除了整数 0 之外，这个整数不会以零开头。
 *
 * 示例 1:
 * 输入: [1,2,3]
 * 输出: [1,2,4]
 * 解释: 输入数组表示数字 123。
 *
 * 示例 2:
 * 输入: [4,3,2,1]
 * 输出: [4,3,2,2]
 * 解释: 输入数组表示数字 4321。
 */
public class AddOne {


    /**
     * 方法：数学问题
     * 1、普通情况，除9之外的数字加1。
     * 2、特殊情况，9加1。（因为9加1需要进位）
     *
     * @param digits 数字
     * @return
     */
    public int[] plusOne(int[] digits) {
        //数组长度
        int len = digits.length;
        //个位在后，从后向前遍历
        //在个位不为9的时候只会循环一次
        for(int i = len - 1; i >= 0; i--) {
            //此位加一
            digits[i]++;
            //目的是在此位加1后会变成10，取余此位加一后直接变为0
            digits[i] %= 10;
            //在此位加1后不为0，就不会再往前进位，即加法结束
            if(digits[i]!=0)
                return digits;
        }
        //数字的各个为在加1之前都为9,加1后各个位都是0，最高位直接赋1
        digits = new int[len + 1];
        digits[0] = 1;
        return digits;
    }
}
