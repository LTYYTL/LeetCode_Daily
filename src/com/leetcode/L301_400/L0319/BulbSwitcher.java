package com.leetcode.L301_400.L0319;

/**
 * 319. 灯泡开关
 * 初始时有 n 个灯泡处于关闭状态。第一轮，你将会打开所有灯泡。接下来的第二轮，你将会每两个灯泡关闭一个。
 * 第三轮，你每三个灯泡就切换一个灯泡的开关（即，打开变关闭，关闭变打开）。第 i 轮，你每 i 个灯泡就切换一个灯泡的开关。直到第 n 轮，你只需要切换最后一个灯泡的开关。
 * 找出并返回 n 轮后有多少个亮着的灯泡。
 *
 * 示例 1：
 * 输入：n = 3
 * 输出：1
 * 解释：
 * 初始时, 灯泡状态 [关闭, 关闭, 关闭].
 * 第一轮后, 灯泡状态 [开启, 开启, 开启].
 * 第二轮后, 灯泡状态 [开启, 关闭, 开启].
 * 第三轮后, 灯泡状态 [开启, 关闭, 关闭].
 * 你应该返回 1，因为只有一个灯泡还亮着。
 *
 * 示例 2：
 * 输入：n = 0
 * 输出：0
 *
 * 示例 3：
 * 输入：n = 1
 * 输出：1
 *
 * 提示：
 * 0 <= n <= 109
 */
public class BulbSwitcher {
    /**
     * 方法：数学
     * 解题思路：第i盏灯的亮灭取决于其在1~n中约数的个数，约数为偶数灭，约数为奇数亮，
     *         但约数是成对出现的，如：6的约数2、3，所以想要约数成奇数，必须需要完全平方，即2的平方是4
     *         寻找1~n中完全平方数的个数，即是亮的个数
     * @param n
     * @return
     */
    public int bulbSwitch(int n) {
        //求1~n中完全平方的个数
        //当n=4时，开方向下取整等于2，说明1~4中只有两个完全平方1，4
        //当n=5时，开方向下取整等于2，说明1~5中只有两个完全平方1，4
        //当n=6时，开方向下取整等于2，说明1~6中只有两个完全平方1，4
        //以此类推，1~n中完全平方的个数等于n开方向下取整的值
        return (int) Math.sqrt(n+0.5);
    }
}
