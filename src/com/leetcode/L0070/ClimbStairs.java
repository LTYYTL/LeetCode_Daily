package com.leetcode.L0070;

/**
 * 70. 爬楼梯
 * 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
 * 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？
 * 注意：给定 n 是一个正整数。
 *
 * 示例 1：
 * 输入： 2
 * 输出： 2
 * 解释： 有两种方法可以爬到楼顶。
 * 1.  1 阶 + 1 阶
 * 2.  2 阶
 *
 * 示例 2：
 * 输入： 3
 * 输出： 3
 * 解释： 有三种方法可以爬到楼顶。
 * 1.  1 阶 + 1 阶 + 1 阶
 * 2.  1 阶 + 2 阶
 * 3.  2 阶 + 1 阶
 */
public class ClimbStairs {
    /**
     * 方法：动态规划
     *
     * 上 1 阶台阶：有1种方式。
     * 上 2 阶台阶：有1+1和2两种方式。
     * 上 3 阶台阶：到达第3阶的方法总数就是到第1阶和第2阶的方法数之和。
     * 上 n 阶台阶，到达第n阶的方法总数就是到第 (n-1) 阶和第 (n-2) 阶的方法数之和。
     * 状态方程：dp[n] = dp[n-1] + dp[n-2]
     *
     * @param n 阶数
     * @return 方案数
     */
    public int climbStairs(int n) {
        //索引从0开始
        int[] res = new int[n+1];
        res[0] = 1;
        res[1] = 1;
        //计算dp[i]
        for (int i = 2; i <= n;i++){
            res[i] = res[i - 1] + res[i -2];
        }
        return res[n];
    }
}
