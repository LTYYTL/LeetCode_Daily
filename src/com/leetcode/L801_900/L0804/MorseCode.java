package com.leetcode.L801_900.L0804;

import java.util.TreeSet;

/**
 * 804. 唯一摩尔斯密码词
 * 国际摩尔斯密码定义一种标准编码方式，将每个字母对应于一个由一系列点和短线组成的字符串， 比如: "a" 对应 ".-", "b" 对应 "-...", "c" 对应 "-.-.", 等等。
 * 为了方便，所有26个英文字母对应摩尔斯密码表如下：
 * [".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."]
 * 给定一个单词列表，每个单词可以写成每个字母对应摩尔斯密码的组合。例如，"cab" 可以写成 "-.-..--..."，(即 "-.-." + ".-" + "-..." 字符串的结合)。我们将这样一个连接过程称作单词翻译。
 * 返回我们可以获得所有词不同单词翻译的数量。
 *
 * 例如:
 * 输入: words = ["gin", "zen", "gig", "msg"]
 * 输出: 2
 * 解释:
 * 各单词翻译如下:
 * "gin" -> "--...-."
 * "zen" -> "--...-."
 * "gig" -> "--...--."
 * "msg" -> "--...--."
 * 共有 2 种不同翻译, "--...-." 和 "--...--.".
 *
 * 注意:
 * 单词列表words 的长度不会超过 100。
 * 每个单词 words[i]的长度范围为 [1, 12]。
 * 每个单词 words[i]只包含小写字母。
 */
public class MorseCode {
    /**
     * Set集合法
     * @param words String[]数组
     * @return 摩斯密码的种类
     */
    public int uniqueMorseRepresentations(String[] words) {
        //每个字母的摩斯密码表
        String[] MORSE = new String[]{".-","-...","-.-.","-..",".","..-.","--.",
                "....","..",".---","-.-",".-..","--","-.",
                "---",".--.","--.-",".-.","...","-","..-",
                "...-",".--","-..-","-.--","--.."};
        //借助set无重复性质，去除相同的摩斯密码
        TreeSet<String> set = new TreeSet<>();
        //遍历每一个单词获得对应的摩斯密码
        for (String word:words){
            //存储每个单词对应的摩斯密码
            StringBuilder res = new StringBuilder();
            //将String[]数组中的每一单词细分到每一个字母获得其相应的摩斯密码
            for (int i = 0; i < word.length(); i++){
                //获得每个单词的每个字母，并且到字母摩斯密码表中查找对应的摩斯密码
                res.append(MORSE[word.charAt(i)-'a']);
            }
            //将单词的摩斯密码存储到set中
            set.add(res.toString());
        }
        return set.size();
    }


}
