package com.leetcode.L0639;

/**
 * 639. 解码方法 II
 * 一条包含字母 A-Z 的消息通过以下的方式进行了编码：
 * 'A' -> 1
 * 'B' -> 2
 * ...
 * 'Z' -> 26
 * 要 解码 一条已编码的消息，所有的数字都必须分组，然后按原来的编码方案反向映射回字母（可能存在多种方式）。例如，"11106" 可以映射为：
 *
 * "AAJF" 对应分组 (1 1 10 6)
 * "KJF" 对应分组 (11 10 6)
 * 注意，像 (1 11 06) 这样的分组是无效的，因为 "06" 不可以映射为 'F' ，因为 "6" 与 "06" 不同。
 *
 * 除了 上面描述的数字字母映射方案，编码消息中可能包含 '*' 字符，可以表示从 '1' 到 '9' 的任一数字（不包括 '0'）。
 * 例如，编码字符串 "1*" 可以表示 "11"、"12"、"13"、"14"、"15"、"16"、"17"、"18" 或 "19" 中的任意一条消息。
 * 对 "1*" 进行解码，相当于解码该字符串可以表示的任何编码消息。
 * 给你一个字符串 s ，由数字和 '*' 字符组成，返回 解码 该字符串的方法 数目 。
 * 由于答案数目可能非常大，返回对 109 + 7 取余 的结果。
 *
 * 示例 1：
 * 输入：s = "*"
 * 输出：9
 * 解释：这一条编码消息可以表示 "1"、"2"、"3"、"4"、"5"、"6"、"7"、"8" 或 "9" 中的任意一条。
 * 可以分别解码成字符串 "A"、"B"、"C"、"D"、"E"、"F"、"G"、"H" 和 "I" 。
 * 因此，"*" 总共有 9 种解码方法。
 *
 * 示例 2：
 * 输入：s = "1*"
 * 输出：18
 * 解释：这一条编码消息可以表示 "11"、"12"、"13"、"14"、"15"、"16"、"17"、"18" 或 "19" 中的任意一条。
 * 每种消息都可以由 2 种方法解码（例如，"11" 可以解码成 "AA" 或 "K"）。
 * 因此，"1*" 共有 9 * 2 = 18 种解码方法。
 *
 * 示例 3：
 * 输入：s = "2*"
 * 输出：15
 * 解释：这一条编码消息可以表示 "21"、"22"、"23"、"24"、"25"、"26"、"27"、"28" 或 "29" 中的任意一条。
 * "21"、"22"、"23"、"24"、"25" 和 "26" 由 2 种解码方法，但 "27"、"28" 和 "29" 仅有 1 种解码方法。
 * 因此，"2*" 共有 (6 * 2) + (3 * 1) = 12 + 3 = 15 种解码方法。
 *
 * 提示：
 * 1 <= s.length <= 105
 * s[i] 是 0 - 9 中的一位数字或字符 '*'
 */
public class DecodeWaysII {
    int mod = (int)1e9+7;
    public int numDecodings(String s) {
        //长度
        int n = s.length();
        //转换成字符串数组
        char[] chars = s.toCharArray();
        //动态规划
        long[] dp = new long[n];
        //判断第一位
        dp[0] = chars[0] == '*' ? 9 : (chars[0] != '0' ? 1 : 0);
        for (int i = 1; i < chars.length; i++) {
            char cur = chars[i];
            char pre = chars[i-1];
            if (cur == '*'){
                dp[i] += dp[i-1] * 9;
                if (pre == '*'){
                    //11~19 & 21~26
                    dp[i] += (i-2 >= 0 ? dp[i-2] : 1) *15;
                }else {
                    if (pre == '1')//前面1的情况
                        dp[i] += (i-2 >= 0 ? dp[i-2] : 1)*9;
                    if (pre == '2')//前面2的情况
                        dp[i] += (i-2 >= 0 ? dp[i-2] : 1)*6;
                }
            }else {
                if (pre == '*'){
                    if (cur == '0')
                        dp[i] += (i-2 >= 0 ? dp[i-2] : 1)*2;
                    else {
                        dp[i] += dp[i-1];
                        if (cur <= '6')
                            dp[i] += (i-2 >= 0 ? dp[i-2] : 1)*2;
                        else
                            dp[i] += (i-2 >= 0 ? dp[i-2] : 1);
                    }
                }else {
                    if (cur == '0'){
                        if (pre == '1' || pre == '2')
                            dp[i] += (i-2 >= 0 ? dp[i-2] : 1);
                    }else {
                        dp[i] += dp[i-1];
                        if (pre == '1'){
                            dp[i] += (i-2 >= 0 ? dp[i-2] : 1);
                        }
                        if (pre == '2' && cur <= '6')
                            dp[i] += (i-2 >= 0 ? dp[i-2] : 1);
                    }
                }
            }
            dp[i] %= mod;
        }
        return (int) dp[n-1];
    }
}
